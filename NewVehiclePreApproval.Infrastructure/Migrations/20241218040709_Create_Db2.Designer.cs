// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NewVehiclePreApproval.Infrastructure;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NewVehiclePreApproval.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241218040709_Create_Db2")]
    partial class Create_Db2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NewVehiclePreApproval.Domain.Requests.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("rejection_reason");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_requests");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_requests_id");

                    b.ToTable("requests", (string)null);
                });

            modelBuilder.Entity("NewVehiclePreApproval.Domain.Requests.Request", b =>
                {
                    b.OwnsOne("NewVehiclePreApproval.Domain.Requests.ClientInformation", "ClientInformation", b1 =>
                        {
                            b1.Property<Guid>("RequestId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("client_information_city");

                            b1.Property<string>("Dni")
                                .IsRequired()
                                .HasMaxLength(13)
                                .HasColumnType("character varying(13)")
                                .HasColumnName("client_information_dni");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("client_information_email");

                            b1.Property<decimal>("EstimatedMonthlyIncome")
                                .HasPrecision(18, 2)
                                .HasColumnType("numeric(18,2)")
                                .HasColumnName("client_information_estimated_monthly_income");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasMaxLength(250)
                                .HasColumnType("character varying(250)")
                                .HasColumnName("client_information_full_name");

                            b1.Property<string>("HomeAddress")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("client_information_home_address");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(8)
                                .HasColumnType("character varying(8)")
                                .HasColumnName("client_information_phone_number");

                            b1.Property<string>("Rtn")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("character varying(14)")
                                .HasColumnName("client_information_rtn");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("client_information_state");

                            b1.Property<string>("WorkOrBusinessAddress")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("client_information_work_or_business_address");

                            b1.Property<string>("WorkOrBusinessDescription")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("client_information_work_or_business_description");

                            b1.Property<string>("WorkOrBusinessName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("client_information_work_or_business_name");

                            b1.HasKey("RequestId");

                            b1.ToTable("requests");

                            b1.WithOwner()
                                .HasForeignKey("RequestId")
                                .HasConstraintName("fk_requests_requests_id");
                        });

                    b.OwnsOne("NewVehiclePreApproval.Domain.Requests.SellerInformation", "SellerInformation", b1 =>
                        {
                            b1.Property<Guid>("RequestId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Dealership")
                                .IsRequired()
                                .HasMaxLength(250)
                                .HasColumnType("character varying(250)")
                                .HasColumnName("seller_information_dealership");

                            b1.Property<string>("VendorName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("seller_information_vendor_name");

                            b1.HasKey("RequestId");

                            b1.ToTable("requests");

                            b1.WithOwner()
                                .HasForeignKey("RequestId")
                                .HasConstraintName("fk_requests_requests_id");
                        });

                    b.OwnsOne("NewVehiclePreApproval.Domain.Requests.VehicleInformation", "VehicleInformation", b1 =>
                        {
                            b1.Property<Guid>("RequestId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Brand")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("vehicle_information_brand");

                            b1.Property<string>("Model")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("vehicle_information_model");

                            b1.Property<decimal>("Price")
                                .HasPrecision(18, 2)
                                .HasColumnType("numeric(18,2)")
                                .HasColumnName("vehicle_information_price");

                            b1.Property<int>("Year")
                                .HasColumnType("integer")
                                .HasColumnName("vehicle_information_year");

                            b1.HasKey("RequestId");

                            b1.ToTable("requests");

                            b1.WithOwner()
                                .HasForeignKey("RequestId")
                                .HasConstraintName("fk_requests_requests_id");
                        });

                    b.Navigation("ClientInformation")
                        .IsRequired();

                    b.Navigation("SellerInformation")
                        .IsRequired();

                    b.Navigation("VehicleInformation")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
